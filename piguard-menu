#!/bin/bash

WT_HEIGHT=18
WT_WIDTH=44
WT_MENU_HEIGHT=12


set_config_var() {
  lua - "$1" "$2" "$3" <<EOF > "$3.bak"
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
  if line:match("^#?%s*"..key.."=.*$") then
    line=key.."="..value
    made_change=true
  end
  print(line)
end
if not made_change then
  print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}


do_set_locale(){
  echo
  whiptail --title "Set locale" --msgbox "\
  On the next screen use <space key> to  select your locale (date and time format)
  for US please:\n
          Select [*] en_US.UFT-8 UTF-8\n
  \n
  (leave the en_GB.UFT-8 selected as well)
  \
  " $WT_HEIGHT $WT_WIDTH
  echo "Raspberry Pi Locale configuration is loading..."
  echo "use <space key> to select"
  echo "for US Select: en_US.UTF-8 UTF-8"

  sudo dpkg-reconfigure locales
}

do_set_timezone() {

  whiptail --title "Set Time zone" --msgbox "\
On the next screen select your timezone by first selecting your geographical area then selecting your timezone within tha$
For California please select\n
          US\n
   then\n
          Pacific-New
\
" $WT_HEIGHT $WT_WIDTH
  echo "Raspberry Pi Time Zone configuration is loading..."
  echo "For California select: US/Pacific-New"

  sudo dpkg-reconfigure tzdata

}


do_set_hostname_gpu_mem_ssh() {
  echo "setting hostname to 'piguard' "
  echo
  sudo sh -c 'echo "piguard" > /etc/hostname'
  sudo sed -i "s/127.0.1.1.*raspberrypi/127.0.1.1\tpiguard/g" /etc/hosts
  echo
  echo "done setting hostname"
  echo
  echo "setting Graphics memory (GPU) to 16Kb..."
  sudo set_config_var gpu_mem "16" /boot/config.txt
  echo "done setting gpu memory"
  echo
  echo "enabling SSH..."
  sudo update-rc.d ssh enable
  sudo invoke-rc.d ssh start
  echo "SSH Enabled"
  echo
  echo "enable RCA if there/don't force HDMI if not plugged in"
  sudo sed -i "s/^hdmi_force_hotplug=1/#hdmi_force_hotplug=1/g" /boot/config.txt
  echo "done disabling Force HDMI"

}

do_check_ralink() {

  if lsusb | grep -q "RT5370" ; then
    whiptail --title "Ralink RT5370 check" --msgbox "All good!\nRecommended Wifi Adaptor Ralink RT5770 found!" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
  else
    whiptail --title "Ralink RT5370 check" --msgbox "Warning!\nRecommended Wifi Adaptor Ralink RT5770 NOT found!" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
  fi
}

if_bounce() {
    echo "Bouncing $1"
    sudo ifdown $1
    sleep 5
    sudo ifup --force $1
}

do_net_interfaces_eth0_internet(){

  sudo sh -c "echo \"auto lo\" > /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface lo inet loopback\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface eth0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"allow-hotplug wlan0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface wlan0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface default inet dhcp\"  >> /etc/network/interfaces"

  if_bounce eth0
}

do_net_interfaces_eth0_camera(){

  sudo sh -c "echo \"auto lo\" > /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface lo inet loopback\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface eth0 inet static\" >> /etc/network/interfaces"
  sudo sh -c "echo \"address 10.19.12.1\" >> /etc/network/interfaces"
  sudo sh -c "echo \"netmask 255.255.255.0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"allow-hotplug wlan0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface wlan0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface default inet dhcp\"  >> /etc/network/interfaces"

  if_bounce eth0

}

do_wpa_supplicant_conf(){

  sudo sh -c "echo \"ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\" > /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"update_config=1\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"network={\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"ssid=\\\"myNetwork\\\"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"psk=\\\"myPassword\\\"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"#protocol type can be: RSN (for WPA2) and WPA (for WPA1)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"proto=RSN\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"#Key Management type can be : WPA-PSK (Pre-shared) or WPA-EAP (Enterprise)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"key_mgmt=WPA-PSK\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"# Pairwise can be CCMP or TKIP (or WPA2 or WPA1)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"pairwise=CCMP\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"# authorization option should be OPEN for both WPA1 and WPA2 (Less commonly used are SHARED and LEAP\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"auth_alg=OPEN\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"}\" >> /etc/wpa_supplicant/wpa_supplicant.conf"

}


do_set_ssid_password() {

  WIFINETWORKS=$(sudo iwlist wlan0 scan | grep "ESSID" | sed -e 's/.*ESSID:"\([^"]\+\)".*/  \1/' | grep -v ESSID)
  whiptail --title "Available WI-FI Networks" --msgbox "$WIFINETWORKS" 17 48

  do_wpa_supplicant_conf

  SSID=$(whiptail --title "Enter SSID" --inputbox "Enter name (SSID) for Wifi Network (case sensitive)" $WT_HEIGHT $WT_WIDTH "" 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $SSID
    sudo sed -i "s/myNetwork/$SSID/g" /etc/wpa_supplicant/wpa_supplicant.conf
  else
    echo "User selected Cancel."
  fi

  WIFIPASSWORD=$(whiptail --title "Enter Wifi Pasword" --inputbox "Enter password for Wifi Network (case sensitive)" $WT_HEIGHT $WT_WIDTH "" 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $WIFIPASSWORD
    sudo sed -i "s/myPassword/$WIFIPASSWORD/g" /etc/wpa_supplicant/wpa_supplicant.conf
  else
    echo "User selected Cancel."
  fi
}



do_setup_wifi() {

  if ifconfig | grep -q "wlan0" ; then
    echo "All good! A working Wifi adaptor was found"
  else
    whiptail --title "Wlan0 check" --msgbox "Warning!\nno Wifi adaptor was found on wlan0" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
    return
  fi

  echo "Creating /etc/network/interfaces for piguard"
  do_set_ssid_password
  do_net_interfaces_eth0_camera
  if_bounce wlan0
}

do_install_ftp() {

  sudo apt-get update

  sudo apt-get install vsftpd --assume-yes

  sudo sed -i "s/anonymous_enable=YES/anonymous_enable=NO/g" /etc/vsftpd.conf
  sudo sed -i "s/#local_enable=YES/local_enable=YES/g" /etc/vsftpd.conf
  sudo sed -i "s/#write_enable=YES/write_enable=YES/g" /etc/vsftpd.conf
  if grep -Fxq "force_dot_files=YES" /etc/vsftpd.conf 
  then
    echo "force_dot_files=YES already in /etc/vsftpd.conf"
  else
    sudo sh -c "echo \"force_dot_files=YES\" >> /etc/vsftpd.conf"
  fi

  sudo service vsftpd restart
}

do_install_ftp_upload() {

  sudo apt-get update
  sudo apt-get install python-pip --assume-yes
  sudo apt-get install python-dev --assume-yes
  sudo pip install pysftp
  mkdir /home/pi/ftp_upload
  sudo wget https://raw.githubusercontent.com/JesperJurcenoks/ftp_upload/master/FTP_Upload/src/localsettings.py -O /home/pi/ftp_upload/localsettings.py
  sudo wget https://raw.githubusercontent.com/JesperJurcenoks/ftp_upload/master/FTP_Upload/src/ftp_upload.py -O /home/pi/ftp_upload/ftp_upload.py
  sudo nano /home/pi/ftp_upload/localsettings.py

}

do_menu_on_login() {
  echo "setting piguard-menu to run on start-up"
  echo "piguard-menu" > ~/.bash_profile
}


do_set_font_for_pitft() {
  echo "setting font for PiTFT"
  sudo sed -i 's/CHARMAP="[-A-Za-z0-9]*"/CHARMAP="UTF-8"/g' /etc/default/console-setup
  sudo sed -i 's/CODESET="[-A-Za-z0-9]*"/CODESET="guess"/g' /etc/default/console-setup
  sudo sed -i 's/FONTFACE="[-A-Za-z0-9]*"/FONTFACE="Terminus"/g' /etc/default/console-setup
  sudo sed -i 's/FONTSIZE="[-A-Za-z0-9]*"/FONTSIZE="6x12"/g' /etc/default/console-setup
  sudo /etc/init.d/console-setup restart
}

do_console_to_pitft() {
  echo "setting console to output to pitft"
  sudo sed -i 's/rootwait.*/rootwait fbcon=map:10 fbcon=font:VGA8x8/g' "/boot/cmdline.txt"
  sudo reboot
}

do_console_to_hdmi() {
  echo "setting console to output to pitft"
  sudo sed -i 's/rootwait.*/rootwait/g' "/boot/cmdline.txt"
  sudo reboot
}

do_install_pitft() {
  mkdir ~/pitft
  cd ~/pitft
  wget http://adafru.it/pitftsh -O ~/pitft/pitft.sh
  chmod +x ~/pitft/pitft.sh
  sudo sed -i 's/if ask "Would you like the console to appear on the PiTFT display?"/if 1==0/g' ~/pitft/pitft.sh # do not do and do not ask
  sudo sed -i 's/if ask "Would you like GPIO #23 to act as a on\/off button?"/if 1==0/g' ~/pitft/pitft.sh #never install the power down button
  sudo ./pitft.sh -t 28c -r
  do_console_to_pitft
  sudo reboot
}


do_upside_down() {

  if grep -Fq "rotate=90" /etc/modprobe.d/adafruit.conf
  then
    echo "current roation=90 setting to 270"
    sudo sed -i "s/rotate=[0-9]* /rotate=270 /g" /etc/modprobe.d/adafruit.conf
    sudo reboot
  else
    echo "current rotation-270 setting to 90"
    sudo sed -i "s/rotate=[0-9]* /rotate=90 /g" /etc/modprobe.d/adafruit.conf
    sudo reboot
  fi
}

do_about() {
  whiptail --msgbox "\
PiGuard is an open source project by Neighborhood Guard an Oakland, CA Based non-profit
piguard-menu is written by Jesper Jurcenoks
Copyright 2014 Neighborhood Guard
Released under GNU Affero 3.0

www.neighborhoodguard.org
 \
" 17 44 1
}

do_shutdown() {
  sudo shutdown -h now

}

do_reboot() {
  sudo reboot
}

do_get_wifi_ip() {
  WIFI_IP_ADDR=$(ifconfig wlan0 | awk '/addr:/ {print $2;}')
  ETH0_IP_ADDR=$(ifconfig eth0 | awk '/addr:/ {print $2;}')
  whiptail --title "Get IP addresses" --msgbox "WI-FI   : $WIFI_IP_ADDR\n\nEthernet: $ETH0_IP_ADDR" 12 36

}

do_ping_camera() {

  PINGRESULT=$(ping -c 4 -W 1 10.19.12.2)
  whiptail --title "Ping Camera Result" --msgbox "$PINGRESULT" 17 48
}

do_ping_google() {

  PINGRESULT=$(ping -c 4 -W 1 www.google.com)
  whiptail --title "Ping Google Result" --msgbox "$PINGRESULT" 17 48
}

do_count_incoming() {

 IMAGECOUNT=$(find ~/images.incoming/. | wc -l)
 DAYCOUNT=$(ls -1 ~/images.incoming | wc -l)
 whiptail --title "Outgoing queue status" --msgbox "Days queued: $DAYCOUNT\nImages queued: $IMAGECOUNT" 17 48

}

do_update_piguard_menu() {

  sudo wget https://raw.githubusercontent.com/JesperJurcenoks/piguard-menu/master/piguard-menu -O /usr/local/bin/piguard-menu
  sudo chmod +x /usr/local/bin/piguard-menu

  exec /usr/local/bin/piguard-menu
}

do_update_piguard_linux() {
  echo "Updating Raspbian to latest version..."
  echo "- first clean out any old updates that we don't need anymore"
  sudo apt-get clean
  echo "- second synchronize the database on raspberry pi with available software"
  sudo apt-get update
  echo "- third download and upgrade newer packages"
  sudo apt-get upgrade --assume-yes
  echo "- fourth release space used to upgrade the system"
  sudo apt-get clean

}

do_debug_menu() {

  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Debug Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Check Camera connection (Ping it)" ""\
    "2 Check Internet connection (Ping Google)" ""\
    "3 Check Wifi Adapter" ""\
    "4 Set Ethernet to Internet(dhcp)" ""\
    "5 Set ethernet to Camera (10.19.12.1)" ""\
    "6 Count Images pending upload" ""\
    "7 Use Pitft mini display and reboot" ""\
    "8 Use HDMI and reboot" ""\
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_ping_camera ;;
      2\ *) do_ping_google ;;
      3\ *) do_check_ralink ;;
      4\ *) do_net_interfaces_eth0_internet ;;
      5\ *) do_net_interfaces_eth0_camera ;;
      6\ *) do_count_incoming ;;
      7\ *) do_console_to_pitft ;;
      8\ *) do_console_to_hdmi ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}


do_maintenance_menu() {

  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Maintenance Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Update PiGuard Menu" "" \
    "2 Update linux & libraries" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_update_piguard_menu ;;
      2\ *) do_update_piguard_linux ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}

do_setup_menu() {
  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Set Locale" "" \
    "2 Set Time Zone" "" \
    "3 Set hostname, GPU Mem, enable SSH, RCA" "" \
    "4 Update linux & libraries" "" \
    "5 Set Cable to Cam and wifi to upload" "" \
    "6 Change Wifi name and password" "" \
    "7 Install and start ftp-server" "" \
    "8 install NG ftp_upload" "" \
    "9 Set menu to start on login" "" \
    "A Set font for PiTFT mini display" "" \
    "B Install PiTFT mini display drivers" ""\
    "C Upside down Mini display and reboot" ""\
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_set_locale ;;
      2\ *) do_set_timezone ;;
      3\ *) do_set_hostname_gpu_mem_ssh ;;
      4\ *) do_update_piguard_linux ;;
      5\ *) do_setup_wifi ;;
      6\ *) do_set_ssid_password ;;
      7\ *) do_install_ftp ;;
      8\ *) do_install_ftp_upload ;;
      9\ *) do_menu_on_login ;;
      A\ *) do_set_font_for_pitft ;;
      B\ *) do_install_pitft ;;
      C\ *) do_upside_down ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}


#
#interactive use loop
#

while true; do
  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Menu Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Get IP Addresses of device " "" \
    "2 Debug Menu" ""\
    "3 Maintenance menu" "" \
    "4 Setup Menu" "" \
    "7 Restart (Reboot) PiGuard" "" \
    "8 Shutdown PiGuard safely" "" \
    "9 About PiGuard-Config" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_get_wifi_ip ;;
      2\ *) do_debug_menu ;;
      3\ *) do_maintenance_menu;;
      4\ *) do_setup_menu;;
      7\ *) do_reboot ;;
      8\ *) do_shutdown;;
      9\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  else
    exit 1
  fi
done

#!/bin/bash

##################################################################
# Title:     piguard_menu
# Copyright (C) 2014 Neighborhood Guard, Inc. All rights reserved
# Author:    Jesper Jurcenoks, Neighborhood Guard
# Version:   1.11
#
# piguard_menu is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public
# License as published by # the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# piguard_check is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General
# Public License along with piguard-menu.
# If not, see <http://www.gnu.org/licenses/>.
#
##################################################################

# This size is set to fit a Raspberry PiTFT display
WT_HEIGHT=18
WT_WIDTH=46
WT_MENU_HEIGHT=12
VERSION="1.11"


set_config_var() {
  lua - "$1" "$2" "$3" <<EOF > "$3.bak"
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
  if line:match("^#?%s*"..key.."=.*$") then
    line=key.."="..value
    made_change=true
  end
  print(line)
end
if not made_change then
  print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}


do_set_locale(){
  echo
  whiptail --title "Set locale" --msgbox "\
  On the next screen use <space key> to  select your locale (date and time format)
  for US please:\n
          Select [*] en_US.UFT-8 UTF-8\n
  \n
  (leave the en_GB.UFT-8 selected as well)
  \
  " $WT_HEIGHT $WT_WIDTH
  echo "Raspberry Pi Locale configuration is loading..."
  echo "use <space key> to select"
  echo "for US Select: en_US.UTF-8 UTF-8"

  sudo dpkg-reconfigure locales
}

do_set_timezone() {

  whiptail --title "Set Time zone" --msgbox "\
On the next screen select your timezone by first selecting your geographical area then selecting your timezone within tha$
For California please select\n
          US\n
   then\n
          Pacific-New
\
" $WT_HEIGHT $WT_WIDTH
  echo "Raspberry Pi Time Zone configuration is loading..."
  echo "For California select: US/Pacific-New"

  sudo dpkg-reconfigure tzdata
  
}

do_set_timezone_timesync() {
  do_set_timezone
  do_set_timesync_crontab
}

do_set_hostname_gpu_mem_ssh_swap() {
  echo "setting hostname"
  echo
  if [ $HOSTNAME = "raspberrypi" ]; then
    HOSTNAME="piguard-"
  fi
  HOSTNAME=$(whiptail --title "Set hostname" --inputbox 'Enter the new hostname' $WT_HEIGHT $WT_WIDTH "$HOSTNAME" 3>&1 1>&2 2>&3)
  exitstatus=$?
  if [ $exitstatus = 0 ]; then
    sudo sed -i "s/^.*$/$HOSTNAME/g" /etc/hostname
    sudo sed -i "s/127.0.1.1.*$/127.0.1.1\t$HOSTNAME/g" /etc/hosts
    FORCEREBOOT=1
  else
    HOSTNAME="`cat /etc/hostname`"
    FORCEREBOOT=0
  fi
  echo
  echo "done setting hostname"
  echo
  if grep -Fq "camera" /etc/hosts
  then
    echo "camera already defined in host file"
  else
    echo "adding camera to host file"
    sudo sh -c 'echo "10.19.12.2\tcamera" >> /etc/hosts'
  fi
  echo
  echo "setting Graphics memory (GPU) to 16Kb..."
  sudo set_config_var gpu_mem "16" /boot/config.txt
  echo "done setting gpu memory"
  echo
  echo "enabling SSH..."
  sudo update-rc.d ssh enable
  sudo invoke-rc.d ssh start
  echo "SSH Enabled"
  echo
  echo "enable RCA if there/don't force HDMI if not plugged in"
  sudo sed -i "s/^hdmi_force_hotplug=1/#hdmi_force_hotplug=1/g" /boot/config.txt
  echo "done disabling Force HDMI"
  echo
  echo "stop using swapfile until next boot"
  sudo swapoff --all
  echo "disable swapfile permanently - remove swapfile functionality"
  sudo apt-get remove dphys-swapfile --assume-yes
  echo "done removing swapfile functionality"
  echo 
  echo "remove unneeded wolfram-engine"
  sudo apt-get remove wolfram-engine --assume-yes
  echo "done removing the wolfram-engine"

  if [ $FORCEREBOOT = 1 ]; then
    sudo reboot
  fi
  
}

do_check_ralink() {

  if lsusb | grep -q "RT5370" ; then
    whiptail --title "Ralink RT5370 check" --msgbox "All good!\nRecommended Wifi Adaptor Ralink RT5770 found!" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
  else
    whiptail --title "Ralink RT5370 check" --msgbox "Warning!\nRecommended Wifi Adaptor Ralink RT5770 NOT found!" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
  fi
}

if_bounce() {
    echo "Bouncing $1"
    sudo ifdown $1
    sleep 5
    sudo ifup --force $1
}

do_net_interfaces_eth0_internet(){

  sudo sh -c "echo \"auto lo\" > /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface lo inet loopback\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface eth0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"allow-hotplug wlan0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface wlan0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface default inet dhcp\"  >> /etc/network/interfaces"

  if_bounce eth0
}

do_net_interfaces_eth0_camera(){

  sudo sh -c "echo \"auto lo\" > /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface lo inet loopback\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface eth0 inet static\" >> /etc/network/interfaces"
  sudo sh -c "echo \"address 10.19.12.1\" >> /etc/network/interfaces"
  sudo sh -c "echo \"netmask 255.255.255.0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"allow-hotplug wlan0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface wlan0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface default inet dhcp\"  >> /etc/network/interfaces"

  if_bounce eth0

}

do_wpa_supplicant_conf(){

  sudo sh -c "echo \"ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\" > /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"update_config=1\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"network={\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"ssid=\\\"myNetwork\\\"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"psk=\\\"myPassword\\\"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"#protocol type can be: RSN (for WPA2) and WPA (for WPA1)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"proto=RSN\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"#Key Management type can be : WPA-PSK (Pre-shared) or WPA-EAP (Enterprise)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"key_mgmt=WPA-PSK\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"# Pairwise can be CCMP or TKIP (or WPA2 or WPA1)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"pairwise=CCMP\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"# authorization option should be OPEN for both WPA1 and WPA2 (Less commonly used are SHARED and LEAP\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"auth_alg=OPEN\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"}\" >> /etc/wpa_supplicant/wpa_supplicant.conf"

}


do_set_camera_ip() {

  CAMERAIP=$(grep 'camera' /etc/hosts | grep -o "[0-9.]*")
  echo $CAMERAIP
  CAMERAIP=$(whiptail --title "Enter Camera IP" --inputbox "for connectivity testing enter IP address of Camera " $WT_HEIGHT $WT_WIDTH $CAMERAIP 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $CAMERAIP
    sudo sed -i "s/.*camera/$CAMERAIP\tcamera/1" /etc/hosts
  else
    echo "User selected Cancel."
  fi

}

do_set_ssid_password() {

  WIFINETWORKS=$(sudo iwlist wlan0 scan | grep "ESSID" | sed -e 's/.*ESSID:"\([^"]\+\)".*/  \1/' | grep -v ESSID)
  whiptail --title "Available WI-FI Networks" --msgbox "$WIFINETWORKS" 17 48

  do_wpa_supplicant_conf

  SSID=$(whiptail --title "Enter SSID" --inputbox "Enter name (SSID) for Wifi Network (case sensitive)" $WT_HEIGHT $WT_WIDTH "" 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $SSID
    sudo sed -i "s/myNetwork/$SSID/g" /etc/wpa_supplicant/wpa_supplicant.conf
  else
    echo "User selected Cancel."
  fi

  WIFIPASSWORD=$(whiptail --title "Enter Wifi Pasword" --inputbox "Enter password for Wifi Network (case sensitive)" $WT_HEIGHT $WT_WIDTH "" 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $WIFIPASSWORD
    sudo sed -i "s/myPassword/$WIFIPASSWORD/g" /etc/wpa_supplicant/wpa_supplicant.conf
  else
    echo "User selected Cancel."
  fi
}



do_setup_wifi() {

  if ifconfig | grep -q "wlan0" ; then
    echo "All good! A working Wifi adaptor was found"
  else
    whiptail --title "Wlan0 check" --msgbox "Warning!\nno Wifi adaptor was found on wlan0" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
    return
  fi

  echo "Creating /etc/network/interfaces for piguard"
  do_set_ssid_password
  do_net_interfaces_eth0_camera
  if_bounce wlan0
}

do_install_ftp() {

  sudo apt-get update

  sudo apt-get install vsftpd --assume-yes

  sudo sed -i "s/anonymous_enable=YES/anonymous_enable=NO/g" /etc/vsftpd.conf
  sudo sed -i "s/#local_enable=YES/local_enable=YES/g" /etc/vsftpd.conf
  sudo sed -i "s/#write_enable=YES/write_enable=YES/g" /etc/vsftpd.conf
  if grep -Fxq "force_dot_files=YES" /etc/vsftpd.conf 
  then
    echo "force_dot_files=YES already in /etc/vsftpd.conf"
  else
    sudo sh -c "echo \"force_dot_files=YES\" >> /etc/vsftpd.conf"
  fi

  sudo service vsftpd restart
}


do_download_ftp_upload_py() {
  wget https://raw.githubusercontent.com/JesperJurcenoks/ftp_upload/master/FTP_Upload/src/ftp_upload.py -O /home/pi/ftp_upload/ftp_upload.py
}

kill_python_processes() {
 sudo pkill python
}

do_upgrade_ftp_upload_py() {
  do_download_ftp_upload_py
  kill_python_processes
  echo "python killed"
  # Piguard_check will restart ftp_upload
}

do_edit_ftp_upload_py(){
  nano /home/pi/ftp_upload/localsettings.py
}


do_install_ftp_upload() {

  sudo apt-get update
  sudo apt-get install python-pip --assume-yes
  sudo apt-get install python-dev --assume-yes
  sudo pip install pysftp
  mkdir /home/pi/ftp_upload
  wget https://raw.githubusercontent.com/JesperJurcenoks/ftp_upload/master/FTP_Upload/src/localsettings.py -O /home/pi/ftp_upload/localsettings.py
  do_download_ftp_upload_py
  mkdir /home/pi/images.incoming
  mkdir /home/pi/images.uploaded
  do_edit_ftp_upload_py
}

do_menu_on_login() {
  echo "setting piguard-menu to run on start-up"
  echo "piguard-menu" > ~/.bash_profile
  echo "setting console to auto-login"
  if grep -Fq "1:2345:respawn:/bin/login -f pi tty1 </dev/tty1 >/dev/tty1 2>&1" /etc/inittab
  then
    echo "autologin already enabled"
  else
    echo "enabling auto login"
    sudo sed -i "s/1:2345:respawn:\/sbin\/getty --noclear 38400 tty1/#1:2345:respawn:\/sbin\/getty --noclear 38400 tty1\n1:2345:respawn:\/bin\/login -f pi tty1 <\/dev\/tty1 >\/dev\/tty1 2>\&1/1" /etc/inittab
  fi
}


do_set_font_for_pitft() {
  echo "setting font for PiTFT"
  sudo sed -i 's/CHARMAP="[-A-Za-z0-9]*"/CHARMAP="UTF-8"/g' /etc/default/console-setup
  sudo sed -i 's/CODESET="[-A-Za-z0-9]*"/CODESET="guess"/g' /etc/default/console-setup
  sudo sed -i 's/FONTFACE="[-A-Za-z0-9]*"/FONTFACE="Terminus"/g' /etc/default/console-setup
  sudo sed -i 's/FONTSIZE="[-A-Za-z0-9]*"/FONTSIZE="6x12"/g' /etc/default/console-setup
  sudo /etc/init.d/console-setup restart
}

do_console_to_pitft() {
  echo "setting console to output to pitft"
  sudo sed -i 's/rootwait.*/rootwait fbcon=map:10 fbcon=font:VGA8x8/g' "/boot/cmdline.txt"
  sudo reboot
}

do_console_to_hdmi() {
  echo "setting console to output to pitft"
  sudo sed -i 's/rootwait.*/rootwait/g' "/boot/cmdline.txt"
  sudo reboot
}

do_install_pitft() {
  mkdir ~/pitft
  cd ~/pitft
  wget http://adafru.it/pitftsh -O ~/pitft/pitft.sh
  chmod +x ~/pitft/pitft.sh
  sed -i 's/if ask "Would you like the console to appear on the PiTFT display?"/if 1==0/g' ~/pitft/pitft.sh # do not do and do not ask
  sed -i 's/if ask "Would you like GPIO #23 to act as a on\/off button?"/if 1==0/g' ~/pitft/pitft.sh #never install the power down button
  sudo ./pitft.sh -t 28c -r
  do_console_to_pitft
  sudo reboot
}


do_upside_down() {

  if grep -Fq "rotate=90" /etc/modprobe.d/adafruit.conf
  then
    echo "current roation=90 setting to 270"
    sudo sed -i "s/rotate=[0-9]* /rotate=270 /g" /etc/modprobe.d/adafruit.conf
    sudo reboot
  else
    echo "current rotation-270 setting to 90"
    sudo sed -i "s/rotate=[0-9]* /rotate=90 /g" /etc/modprobe.d/adafruit.conf
    sudo reboot
  fi
}

do_download_piguard_check() {
  wget https://raw.githubusercontent.com/JesperJurcenoks/piguard_check/master/piguard_check.sh -O ~/ftp_upload/piguard_check.sh
  chmod +x ~/ftp_upload/piguard_check.sh
}

kill_piguard_check() {
  sudo pkill piguard_check.sh
}


do_upgrade_piguard_check() {
  do_download_piguard_check
  kill_python_processes
  kill_piguard_check
  echo "Done upgrading"
#cron will run piguard_check and restart the python process
}

do_remove_timesync_crontab() {
  CRONJOBS=$(crontab -l | grep -v "sudo service ntp restart" | grep -v "^$")
  echo $CRONJOBS | grep -q "placeholder"
  if [ $? = 0 ]; then
    echo "placeholder found in crontab - all good"
    COMMENT=""
  else
    COMMENT="#placeholder comment in crontab to ensure the file is never empty
"
  fi
  echo "$COMMENT
$CRONJOBS" |  crontab
}


do_set_timesync_crontab() {
  CRONJOBS=$(crontab -l | grep -v "sudo service ntp restart" | grep -v "^$")
  echo $CRONJOBS | grep -q "placeholder"
  if [ $? = 0 ]; then
    echo "placeholder found in crontab - all good"
    COMMENT=""
  else
    COMMENT="#placeholder comment in crontab to ensure the file is never empty
"
  fi
  TIMESYNCCRON="1 2 * * *  sudo service ntp restart > ~/ftp_upload/cron_ntp.log 2>&1"
  echo "$COMMENT
$CRONJOBS
$TIMESYNCCRON" |  crontab

echo "time sync now"
sudo service ntp restart

}

do_set_piguard_check_crontab() {
  CRONJOBS=$(crontab -l | grep -v "piguard_check.sh" | grep -v "^$")
  echo $CRONJOBS | grep -q "placeholder"
  if [ $? = 0 ]; then
    echo "placeholder found in crontab - all good"
    COMMENT=""
  else
    COMMENT="#placeholder comment in crontab to ensure the file is never empty
"
  fi
  PIGUARDCHECKCRON="@reboot sleep 60 && ~/ftp_upload/piguard_check.sh > ~/ftp_upload/cron.log 2>&1
*/5 * * * * ~/ftp_upload/piguard_check.sh > ~/ftp_upload/cron.log 2>&1"
  echo "$COMMENT
$CRONJOBS
$PIGUARDCHECKCRON" |  crontab
}

do_remove_piguard_check_crontab(){
  CRONJOBS=$(crontab -l | grep -v "piguard_check.sh" | grep -v "^$")
  echo $CRONJOBS | grep -q "placeholder"
  if [ $? = 0 ]; then
    echo "placeholder found in crontab - all good"
    COMMENT=""
  else
    COMMENT="#placeholder comment in crontab to ensure the file is never empty
"
  fi
  echo "$COMMENT
$CRONJOBS
" |  crontab
}

do_no_crontab() {
  crontab -r
}



do_display_cronlog() {
  clear
  more ~/ftp_upload/cron.log
  echo 
  echo "press any key to continue"
  read -s -n 1
}

do_display_timesync_cronlog() {
  clear
  more ~/ftp_upload/cron_ntp.log
  echo 
  echo "press any key to continue"
  read -s -n 1
}


do_display_ftp_upload.log() {
  clear
  tail -n 30 ~/ftp_upload/ftp_upload.log
  echo "press any key to continue"
  read -s -n 1
}


do_install_piguard_check() {
  do_download_piguard_check
  do_set_piguard_check_crontab
}


do_install_dhcp() {
  sudo apt-get install isc-dhcp-server
  sudo sed -i 's/option domain-name "example.org";/option domain-name "piguard.localnet";/g' /etc/dhcp/dhcpd.conf
  sudo sed -i 's/option domain-name-servers ns1.example.org, ns2.example.org;/option domain-name-servers 8.8.8.8, 8.8.4.4;/g' /etc/dhcp/dhcpd.conf
  if grep -q "subnet 10.19.12.0" /etc/dhcp/dhcpd.conf; then
    echo "subnet already defined in dhcp"
  else
    sudo sed -i "s/8.8.4.4;/8.8.4.4;\n\n# This is the very basic subnet between the PiGuard and the Axis Camera\nsubnet 10.19.12.0 netmask 255.255.255.0 {\n# we are making the range only 1 ip-address to be sure that the Camera gets\n# the same address every time.\nrange 10.19.12.2 10.19.12.2;\noption routers 10.19.12.1;\n}/g"  /etc/dhcp/dhcpd.conf
  fi
}

do_install_iptables() {
  echo "Setup Ip forwarding between the cable and wi-fi interface by editing the file /etc/sysctl.conf"
  sudo sed -i "s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g" /etc/sysctl.conf
  echo '\nThe most popular firewall for Linux is called "iptables" and it is one of the few that has been ported to Raspberry Pi. Installing iptables'
  sudo apt-get install iptables
  echo '\nBy default, iptables is set to allow ALL connections (not performing any firewall blocking or filtering at all).'
  echo 'The order of the following statements is IMPORTANT - doing this in the wrong order could block your SSH (putty) access.'
  sudo iptables -A INPUT -j ACCEPT -m state --state ESTABLISHED,RELATED
  echo '\nThis will allow any connection that has been properly established and related to pass through. This is a precursor for later openings in the firewall.'
  sudo iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
  echo '\nThis will allow you connect to Raspberry PI via SSH.'
  sudo iptables -A INPUT -p tcp --dport 21 -m state --state NEW -j ACCEPT
  sudo iptables -A INPUT -p tcp --dport ftp-data -j ACCEPT
  echo '\nThis will allow you connect to the FTP server running on the PiGuard'
  sudo iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT
  echo '\nThis will allow you to ping the Raspberry PI'
  sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
  echo '\nThis will set the Wi-fi (wlan0) to be the outward IP address where everything else - e.g. the camera will be masquerading behind'
  sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination 10.19.12.2:80
  echo '\nThis will redirect the port 80 on the PiGuard to port 80 on the camera.'
  sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j DNAT --to-destination 10.19.12.2:443
  echo '\nThis will redirect the port 443 on the PiGuard to port 443 on the camera.'
  sudo iptables -P INPUT DROP
  echo '\nThis will block all traffic not accepted by one of the rules above'
  echo '\nThe command sudo iptables -L lists all the rules you have entered into the firewall.'
  echo '\nSaving the iptables (firewall) configuration to the file /etc/network/iptables.conf'
  sudo bash -c 'iptables-save > /etc/network/iptables.conf'
  echo '\nSetup this firewall configuration to happen automatically on reboot'
  echo 'create a new file called setupiptables in the /etc/network/if-up.d directory'
  sudo sh -c 'echo "#!/bin/bash" > /etc/network/if-up.d/setupiptables'
  sudo sh -c 'echo "/sbin/iptables-restore < /etc/network/iptables.conf" >> /etc/network/if-up.d/setupiptables'
  echo '\nset the file to be executable (run as a command)'
  sudo chmod +x /etc/network/if-up.d/setupiptables
}

do_free_disk() {
  FREEDISK=$(df -h /)
  FREEDISKHDD=$(df -h /mnt/ngdata)
  
  whiptail --title "Free Disk Space" --msgbox "$FREEDISK
  $FREEDISKHDD" 12 44
}


do_about() {
  whiptail --msgbox "\
PiGuard is an open source project by Neighborhood Guard - an Oakland, CA Based non-profit
piguard-menu is written by Jesper Jurcenoks
Copyright 2014 Neighborhood Guard
Released under GNU Affero 3.0

www.neighborhoodguard.org
 \
" 17 44 1
}

do_shutdown() {
  sudo shutdown -h now

}

do_reboot() {
  sudo reboot
}

do_get_status() {
  OS_VERSION=$(cat /etc/os-release | grep PRETTY_NAME | sed 's/PRETTY_NAME="//g' | sed 's/"//g')
  WIFI_IP_ADDR=$(ifconfig wlan0 | awk '/addr:/ {print $2;}'| sed "s/addr://1")
  ETH0_IP_ADDR=$(ifconfig eth0 | awk '/addr:/ {print $2;}'| sed "s/addr://1")

  PINGRESULT=$(ping -c 1 -W 1 camera 2>&1)
  if [ $? = 0 ]; then
    CAMERACONNECTION="Good"
  else
    CAMERACONNECTION="Bad "
  fi

  GATEWAY_ADDR=$(route -n | grep "^0.0.0.0" | awk '/0.0.0.0/ {print $2;}')
  PINGRESULT=$(ping -c 1 -W 1 $GATEWAY_ADDR 2>&1)
  if [ $? = 0 ]; then
    WIFICONNECTION="Good"
  else
    WIFICONNECTION="Bad "
  fi

  PINGRESULT=$(ping -c 1 -W 1 www.google.com 2>&1)
  if [ $? = 0 ]; then
    INTERNETCONNECTION="Good"
  else
    INTERNETCONNECTION="Bad "
  fi

  DREAMHOST_ADDR=$(grep -o 'ftp_server = "[a-z0-9A-Z._-]*"' ~/ftp_upload/localsettings.py |  grep -o '"[a-z0-9A-Z._-]*"' | grep -o '[a-z0-9AZ._-]*')
  PINGRESULT=$(ping -c 1 -W 1 $DREAMHOST_ADDR 2>&1)
  if [ $? = 0 ]; then
    DREAMHOSTCONNECTION="Good"
  else
    DREAMHOSTCONNECTION="Bad "
  fi

  CRONRESULT=$(crontab -l)
  echo "$CRONRESULT" | grep -q "piguard_check.sh"
  if [ $? = 0 ];then
    CRONJOB="Enabled"
  else
    CRONJOB="Disabled"
  fi
  echo "$CRONRESULT" | grep -q "wait-for-remote-support.sh"
  if [ $? = 0 ];then
    WAITSUPPORT="Enabled"
  else
    WAITSUPPORT="Disabled"
  fi
  BASELOCATION=$(grep -o '.*base_location = "[~/a-z0-9A-Z._-]*"' ~/ftp_upload/localsettings.py | grep -v '#' | grep -o '"[~/a-z0-9A-Z._-]*"' | grep -o '[~/a-z0-9AZ._-]*')
  
  IMAGECOUNT=$(find $BASELOCATION/images.incoming/. -type f -name '*.jpg' | wc -l)
  DAYCOUNT=$(ls -1 $BASELOCATION/images.incoming | wc -l)
  FREEDISK=$(df -h / | grep "/dev/root" | sed 's/\/dev\/root *[0-9.]*[GMK] *[0-9.]*[GMK] *//1' | sed 's/ *[0-9]*% \///1')
  FREEDISKHDD=$(df -h | grep "/dev/sda1" | sed 's/\/dev\/sda1 *[0-9.]*[GMK] *[0-9.]*[GMK] *//1' | sed 's/ *[0-9]*% \/mnt\/ngdata//1')
  
  STATUSTEXT="$(date)
Name: $HOSTNAME
OS: $OS_VERSION
Wi-Fi   : $WIFI_IP_ADDR
Ethernet: $ETH0_IP_ADDR
Connection
 Camera  : $CAMERACONNECTION   Wi-Fi    : $WIFICONNECTION
 Internet: $INTERNETCONNECTION   Dreamhost: $DREAMHOSTCONNECTION
Pending Upload: $DAYCOUNT Day(s) & $IMAGECOUNT Images
Free Disk: $FREEDISK  $FREEDISKHDD
Background Job is $CRONJOB
Waiting for Support is $WAITSUPPORT"

  whiptail --title "Piguard Status $VERSION" --msgbox "$STATUSTEXT" $WT_HEIGHT $WT_WIDTH 
}

do_ping_camera() {

  PINGRESULT=$(ping -s 10240 -c 4 -W 1 camera 2>&1)
  whiptail --title "Ping Camera Result" --msgbox "$PINGRESULT" 17 48
}

do_ping_google() {

  PINGRESULT=$(ping -c 4 -W 1 www.google.com 2>&1)
  whiptail --title "Ping Google Result" --msgbox "$PINGRESULT" 17 48
}

do_ping_gateway() {

  GATEWAY_ADDR=$(route -n | grep "^0.0.0.0" | awk '/0.0.0.0/ {print $2;}')
  PINGRESULT=$(ping -c 4 -W 1 $GATEWAY_ADDR 2>&1)
  whiptail --title "Ping Gateway Result" --msgbox "$PINGRESULT" 17 48
}

do_ping_dreamhost() {

  DREAMHOST_ADDR=$(grep -o 'ftp_server = "[a-z0-9A-Z._-]*"' ~/ftp_upload/localsettings.py |  grep -o '"[a-z0-9A-Z._-]*"' | grep -o '[a-z0-9AZ._-]*')
  PINGRESULT=$(ping -c 4 -W 1 $DREAMHOST_ADDR 2>&1)
  whiptail --title "Ping Dreamhost Result" --msgbox "$PINGRESULT" 17 48
}


do_count_incoming() {

  BASELOCATION=$(grep -o '.*base_location = "[~/a-z0-9A-Z._-]*"' ~/ftp_upload/localsettings.py | grep -v '#' | grep -o '"[~/a-z0-9A-Z._-]*"' | grep -o '[~/a-z0-9AZ._-]*')
  
  IMAGECOUNT=$(find $BASELOCATION/images.incoming/. -type f -name '*.jpg' | wc -l)
  DAYCOUNT=$(ls -1 $BASELOCATION/images.incoming | wc -l)
  whiptail --title "Outgoing queue status" --msgbox "Days queued: $DAYCOUNT\nImages queued: $IMAGECOUNT" 17 48

}

show_python_processes() {

 PYTHONPROCESSES=$(ps aux | grep -v 'grep python' | grep python)
 whiptail --title "python process status" --msgbox "$PYTHONPROCESSES" 17 48
}

do_update_piguard_menu() {

  sudo wget https://raw.githubusercontent.com/JesperJurcenoks/piguard-menu/master/piguard-menu -O /usr/local/bin/piguard-menu
  sudo chmod +x /usr/local/bin/piguard-menu

  exec /usr/local/bin/piguard-menu
}

do_update_piguard_linux() {
  echo "Updating Raspbian to latest version..."
  echo "- first clean out any old updates that we don't need anymore"
  sudo apt-get clean
  echo "- second synchronize the database on raspberry pi with available software"
  sudo apt-get update
  echo "- third download and upgrade newer packages"
  sudo apt-get upgrade --assume-yes
  echo "- fourth release space used to upgrade the system"
  sudo apt-get clean

}


do_install_remote_support(){

  echo "Installing autossh"
  sudo apt-get update
  sudo apt-get install autossh

  URL="http://support.neighborhoodguard.org/remote-support/"$HOSTNAME"-remote-support"
  wget $URL -O ~/ftp_upload/remote-support
  if [ $? = 0 ]; then
    USERNAME=$(grep "^username.*=" ~/ftp_upload/remote-support | sed "s/username.*=//1" | sed "s/[^a-zA-Z0-9._-]//1")
    BOUNCEHOSTNAME=$(grep "^host.*=" ~/ftp_upload/remote-support | sed "s/host.*=//1" | sed "s/[^a-zA-Z0-9._-]//1")

    if [ -d "/home/pi/.ssh" ]; then
      echo "directory /home/pi/.ssh already exists"
    else
      mkdir ~/.ssh
      chmod 700 ~/.ssh
    fi
    if [ -e "/home/pi/.ssh/tunnel_rsa" ]; then
      echo "RSA Key already exists - leave be"
    else
      echo "making a special key for just tunnel use"
      ssh-keygen -t rsa -f ~/.ssh/tunnel_rsa -N ""
    fi
    echo "clear out the old dreamhost key"
    ssh-keygen -R $BOUNCEHOSTNAME
    echo "get the current dreamhosts key and put it in known hosts to avoid getting 'authentity of host ... can\'t be established' prompt"
    ssh-keyscan -H $BOUNCEHOSTNAME >> ~/.ssh/known_hosts
    echo "copy our key to dreamhost - Password required get it from your Neighborhood Guard support contact"
    ssh-copy-id -i ~/.ssh/tunnel_rsa $USERNAME@$BOUNCEHOSTNAME
    echo "limit the trusted connection to tunnel only and nothing else"
    ssh -i ~/.ssh/tunnel_rsa $USERNAME@$BOUNCEHOSTNAME "~/set-tunnel-limit-on-key.sh $HOSTNAME"

    echo "downloading the wait-for-remote-support script"
#    sudo wget https://raw.githubusercontent.com/JesperJurcenoks/wait-for-remote-support/master/wait-for-remote.support.sh -O ~/ftp_upload/wait-for-remote-support.sh
#    sudo chmod +x ~/ftp_upload/wait-for-remote-support.sh
  else
    echo "failed to get needed configuration file"
    echo "try again"
    echo
    echo "press any key to continue"
    read -s -n 1
  fi
}

do_start_wait_for_remote_support() {
  echo "start wait for remote support"
  ~/ftp_upload/wait-for-remote-support.sh

  echo "Setting wait-for-remote-support crontab"
  CRONJOBS=$(crontab -l | grep -v "wait-for-remote-support.sh" | grep -v "^$")
  echo $CRONJOBS | grep -q "placeholder"
  if [ $? = 0 ]; then
    echo "placeholder found in crontab - all good"
    COMMENT=""
  else
    COMMENT="#placeholder comment in crontab to ensure the file is never empty
"
  fi
  WAIT4SUPPORTCRON="@reboot sleep 90 && ~/ftp_upload/wait-for-remote-support.sh > ~/ftp_upload/support_cron.log 2>&1
0 * * * * ~/ftp_upload/wait-for-remote-support.sh > ~/ftp_upload/support_cron.log 2>&1"
  echo "$COMMENT
$CRONJOBS
$WAIT4SUPPORTCRON" |  crontab
}

do_end_wait_for_remote_support() {
  echo "end wait for remote support"
  kill $(pgrep -f "ssh -fN -R") 

  CRONJOBS=$(crontab -l | grep -v "wait-for-remote-support.sh" | grep -v "^$")
  echo $CRONJOBS | grep -q "placeholder"
  if [ $? = 0 ]; then
    echo "placeholder found in crontab - all good"
    COMMENT=""
  else
    COMMENT="#placeholder comment in crontab to ensure the file is never empty
"
  fi
  echo "$COMMENT
$CRONJOBS
" |  crontab
}

do_chown_pi() {

  sudo chown -R pi:pi /home/pi

}



do_diag_menu() {

  SELECTION=$(whiptail --title "piguard-menu Diagnostics on $HOSTNAME" --menu "diagsnostics Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "1 Check Camera connection (Ping it)" ""\
    "2 Check Internet connection (Ping Google)" ""\
    "3 Check Wifi connection (Ping gateway)" ""\
    "4 Check Dreamhost connection (Ping server)" ""\
    "5 Check Wifi Adapter" ""\
    "6 Count Images pending upload" ""\
    "7 Show free disk space" "" \
    "8 Display background job (cron) log" "" \
    "9 Start piguard_check background job" ""\
    "A Stop piguard_check background job" "" \
    "B Display timesync_cronlog" "" \
    "C Start timesync daily job & Sync now" ""\
    "D Stop timesync daily job" "" \
    "E Show python processes" "" \
    "F Kill python processes" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_ping_camera ;;
      2\ *) do_ping_google ;;
      3\ *) do_ping_gateway ;;
      4\ *) do_ping_dreamhost ;;
      5\ *) do_check_ralink ;;
      6\ *) do_count_incoming ;;
      7\ *) do_free_disk ;;
      8\ *) do_display_cronlog ;;
      9\ *) do_set_piguard_check_crontab ;;
      A\ *) do_remove_piguard_check_crontab;;
      B\ *) do_display_timesync_cronlog ;;
      C\ *) do_set_timesync_crontab ;;
      D\ *) do_remove_timesync_crontab;;
      E\ *) show_python_processes;;
      F\ *) kill_python_processes;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}

do_advanced_settings() {
  SELECTION=$(whiptail --title "Adavanced Settings on $HOSTNAME" --menu "Advanced Settings" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "1 Set Ethernet to Internet(dhcp)" ""\
    "2 Set ethernet to Camera (10.19.12.1)" ""\
    "3 Use Pitft mini display and reboot" ""\
    "4 Use HDMI and reboot" ""\
    "5 Remove all crontab entries" ""\
    "6 Change owner of files to pi" ""\
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_net_interfaces_eth0_internet ;;
      2\ *) do_net_interfaces_eth0_camera ;;
      3\ *) do_console_to_pitft ;;
      4\ *) do_console_to_hdmi ;;
      5\ *) do_no_crontab ;;
      6\ *) do_chown_pi ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi
}

do_support_menu() {
  SELECTION=$(whiptail --title "Support Menu on $HOSTNAME" --menu "Support Menu" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "1 Start 'Wait for Remote Support' session" ""\
    "2 End 'Wait for Remote Support' session" ""\
    "3 Install Remote Support (Req Support PWD)" ""\
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_start_wait_for_remote_support ;;
      2\ *) do_end_wait_for_remote_support ;;
      3\ *) do_install_remote_support ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi
}



do_maintenance_menu() {

  SELECTION=$(whiptail --title "Maintenance Menu on $HOSTNAME" --menu "Maintenance Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "1 Update PiGuard Menu" "" \
    "2 Update linux & libraries" "" \
    "3 Update ftp_upload.py" "" \
    "4 Update piguard_check" "" \
    "5 Set Wifi name and password" "" \
    "6 Edit ftp_upload settings" "" \
    "7 Set Camera IP address" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_update_piguard_menu ;;
      2\ *) do_update_piguard_linux ;;
      3\ *) do_upgrade_ftp_upload_py ;;
      4\ *) do_upgrade_piguard_check ;;
      5\ *) do_set_ssid_password ;;
      6\ *) do_edit_ftp_upload_py ;;
      7\ *) do_set_camera_ip ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}

do_setup_menu_wifi() {
  SELECTION=$(whiptail --title "Setup WiFi on $HOSTNAME" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Back --ok-button Select \
    "1 Auto console login with menu" "" \
    "2 Set hostname and misc then reboot" "" \
    "3 Update linux & libraries" "" \
    "4 Set font for PiTFT mini display" "" \
    "5 Install PiTFT mini display drivers" ""\
    "6 Optional:  Flip Mini display & reboot" ""\
    "7 Set Locale" "" \
    "8 Set Time Zone and timesync" "" \
    "9 Install and start ftp-server" "" \
    "A install NG ftp_upload" "" \
    "B Install DHCP Server" ""\
    "C Install firewall" ""\
    "D Set Cable to Cam and wifi to upload" "" \
    "E Install piguard_check" ""\
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_menu_on_login ;;
      2\ *) do_set_hostname_gpu_mem_ssh_swap ;;
      3\ *) do_update_piguard_linux ;;
      4\ *) do_set_font_for_pitft ;;
      5\ *) do_install_pitft ;;
      6\ *) do_upside_down ;;
      7\ *) do_set_locale ;;
      8\ *) do_set_timezone_timesync ;;
      9\ *) do_install_ftp ;;
      A\ *) do_install_ftp_upload ;;
      B\ *) do_install_dhcp ;;
      C\ *) do_install_iptables ;;
      D\ *) do_setup_wifi ;;
      E\ *) do_install_piguard_check ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}

#
#interactive use loop
#

HOSTNAME="`cat /etc/hostname`"

while true; do
  SELECTION=$(whiptail --title "piguard-menu on $HOSTNAME" --menu "Menu Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Exit --ok-button Select \
    "1 Get Status of Piguard" "" \
    "2 Display ftp_uppload.log" "" \
    "3 Diagnostics Menu" ""\
    "4 Maintenance menu" "" \
    "5 Support Menu" "" \
    "6 Setup Menu (WiFi Edition)" "" \
    "7 Advanced settings" "" \
    "8 Restart (Reboot) PiGuard" "" \
    "9 Shutdown PiGuard safely" "" \
    "A About PiGuard-Menu" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_get_status ;;
      2\ *) do_display_ftp_upload.log ;;
      3\ *) do_diag_menu ;;
      4\ *) do_maintenance_menu ;;
      5\ *) do_support_menu ;;
      6\ *) do_setup_menu_wifi ;;
      7\ *) do_advanced_settings ;;
      8\ *) do_reboot ;;
      9\ *) do_shutdown;;
      A\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  else
    echo 
    echo "***  To return to menu type 'piguard-menu'  ***"
    echo
    exit 1
  fi
done
    echo "***  To return to menu type 'piguard-menu'  ***"

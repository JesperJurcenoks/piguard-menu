#!/bin/sh

WT_HEIGHT=18
WT_WIDTH=44
WT_MENU_HEIGHT=8


set_config_var() {
  lua - "$1" "$2" "$3" <<EOF > "$3.bak"
local key=assert(arg[1])
local value=assert(arg[2])
local fn=assert(arg[3])
local file=assert(io.open(fn))
local made_change=false
for line in file:lines() do
  if line:match("^#?%s*"..key.."=.*$") then
    line=key.."="..value
    made_change=true
  end
  print(line)
end
if not made_change then
  print(key.."="..value)
end
EOF
mv "$3.bak" "$3"
}


do_set_locale(){
  echo
  whiptail --title "Set locale" --msgbox "\
  On the next screen use <space key> to  select your locale (date and time format)
  for US please:\n
          Select [*] en_US.UFT-8 UTF-8\n
  \n
  (leave the en_GB.UFT-8 selected as well)
  \
  " $WT_HEIGHT $WT_WIDTH
  echo "Raspberry Pi Locale configuration is loading..."
  echo "use <space key> to select"
  echo "for US Select: en_US.UTF-8 UTF-8"

  sudo dpkg-reconfigure locales
}

do_set_timezone() {

  whiptail --title "Set Time zone" --msgbox "\
On the next screen select your timezone by first selecting your geographical area then selecting your timezone within tha$
For California please select\n
          US\n
   then\n
          Pacific-New
\
" $WT_HEIGHT $WT_WIDTH
  echo "Raspberry Pi Time Zone configuration is loading..."
  echo "For California select: US/Pacific-New"

  sudo dpkg-reconfigure tzdata

}


do_set_hostname_gpu_mem_ssh() {
  echo "setting hostname to 'piguard' "
  echo
  sudo echo "piguard" > /etc/hostname
  sudo sed -i "s/127.0.1.1.*raspberrypi/127.0.1.1\tpiguard/g" /etc/hosts
  echo
  echo "done setting hostname"
  echo
  echo "setting Graphics memory (GPU) to 16Kb..."
  sudo set_config_var gpu_mem "16" /boot/config.txt
  echo "done setting gpu memory"
  echo
  echo "enabling SSH..."
  sudo update-rc.d ssh enable
  sudo invoke-rc.d ssh start
  echo "SSH Enabled"
}

do_check_ralink() {

  if lsusb | grep -q "RT5370" ; then
    whiptail --title "Ralink RT5370 check" --msgbox "All good!\nRecommended Wifi Adaptor Ralink RT5770 found!" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
  else
    whiptail --title "Ralink RT5370 check" --msgbox "Warning!\nRecommended Wifi Adaptor Ralink RT5770 NOT found!" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
  fi
}

if_bounce() {
    echo "Network connection down! Attempting reconnection."
    sudo ifdown $1
    sleep 5
    sudo ifup --force $1
}

do_net_interfaces_eth0_internet(){

  sudo sh -c "echo \"auto lo\" > /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface lo inet loopback\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface eth0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"allow-hotplug wlan0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface wlan0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface default inet dhcp\"  >> /etc/network/interfaces"

  if_bounce eth0
}

do_net_interfaces_eth0_camera(){

  sudo sh -c "echo \"auto lo\" > /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface lo inet loopback\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface eth0 inet status\" >> /etc/network/interfaces"
  sudo sh -c "echo \"address 10.19.12.1\" >> /etc/network/interfaces"
  sudo sh -c "echo \"netmask 255.255.255.0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"\" >> /etc/network/interfaces"
  sudo sh -c "echo \"allow-hotplug wlan0\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface wlan0 inet dhcp\" >> /etc/network/interfaces"
  sudo sh -c "echo \"wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\" >> /etc/network/interfaces"
  sudo sh -c "echo \"iface default inet dhcp\"  >> /etc/network/interfaces"

  if_bounce eth0

}

do_wpa_supplicant_conf(){

  sudo sh -c "echo \"ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\" > /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"update_config=1\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"network={\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"ssid=\\\"myNetwork\\\"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"psk=\\\"myPassword\\\"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"#protocol type can be: RSN (for WPA2) and WPA (for WPA1)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"proto=RSN\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"#Key Management type can be : WPA-PSK (Pre-shared) or WPA-EAP (Enterprise)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"key_mgmt=WPA-PSK\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"# Pairwise can be CCMP or TKIP (or WPA2 or WPA1)\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"pairwise=CCMP\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"# authorization option should be OPEN for both WPA1 and WPA2 (Less commonly used are SHARED and LEAP\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"auth_alg=OPEN\" >> /etc/wpa_supplicant/wpa_supplicant.conf"
  sudo sh -c "echo \"}\" >> /etc/wpa_supplicant/wpa_supplicant.conf"

}


do_set_ssid_password() {

  do_wpa_supplicant_conf

  SSID=$(whiptail --title "Enter SSID" --inputbox "Enter name (SSID) for Wifi Network (case sensitive)" $WT_HEIGHT $WT_WIDTH "" 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $SSID
    sudo sed -i "s/myNetwork/$SSID/g" /etc/wpa_supplicant/wpa_supplicant.conf
  else
    echo "User selected Cancel."
  fi

  WIFIPASSWORD=$(whiptail --title "Enter Wifi Pasword" --inputbox "Enter password for Wifi Network (case sensitive)" $WT_HEIGHT $WT_WIDTH "" 3>&1 1>&2 2>&3)
  if [ $? = 0 ]; then
    echo "User selected Ok and entered" $WIFIPASSWORD
    sudo sed -i "s/myPassword/$WIFIPASSWORD/g" /etc/wpa_supplicant/wpa_supplicant.conf
  else
    echo "User selected Cancel."
  fi
}



do_setup_wifi() {

  if ifconfig | grep -q "wlan0" ; then
    echo "All good! A working Wifi adaptor was found"
  else
    whiptail --title "Wlan0 check" --msgbox "Warning!\nno Wifi adaptor was found on wlan0" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT
    return
  fi

  echo "Creating /etc/network/interfaces for piguard"
  do_set_ssid_password
  do_net_interfaces_eth0_camera
  if_bounce wlan0
}

do_install_ftp() {

  sudo apt-get update

  sudo apt-get install vsftpd --assume-yes

  sudo sed -i "s/anonymous_enable=YES/anonymous_enable=NO/g" /etc/vsftpd.conf
  sudo sed -i "s/#local_enable=YES/local_enable=YES/g" /etc/vsftpd.conf
  sudo sed -i "s/#write_enable=YES/write_enable=YES/g" /etc/vsftpd.conf
  if grep -Fxq "force_dot_files=YES" /etc/vsftpd.conf 
  then
    echo "force_dot_files=YES already in /etc/vsftpd.conf"
  else
    sudo sh -c "echo \"force_dot_files=YES\" >> /etc/vsftpd.conf"
  fi

  sudo service vsftpd restart
}


do_setup() {
  do_set_locale
  do_set_timezone
  do_set_hostname_gpu_mem_ssh
  do_update_piguard_linux
}



do_about() {
  whiptail --msgbox "\
PiGuard is an open source project by Neighborhood Guard an Oakland, CA Based non-profit
piguard-menu is written by Jesper Jurcenoks
Copyright 2014 Neighborhood Guard
Released under GNU Affero 3.0

www.neighborhoodguard.org
 \
" 17 44 1
}

do_shutdown() {
  sudo shutdown -h now

}

do_reboot() {
  sudo reboot
}

do_get_wifi_ip() {
  IP_ADDR=$(ifconfig wlan0 | awk '/addr:/ {print $2;}')
  whiptail --title "WI-FI IP address" --msgbox $IP_ADDR 7 36

}

do_ping_camera() {

  PINGRESULT=$(ping -c 4 -W 1 10.19.12.2)
  whiptail --title "Ping Camera Result" --msgbox "$PINGRESULT" 17 48
}

do_update_piguard_menu() {

  sudo wget https://raw.githubusercontent.com/JesperJurcenoks/piguard-menu/master/piguard-menu -O /usr/local/bin/piguard-menu
  sudo chmod +x /usr/local/bin/piguard-menu

}

do_update_piguard_linux() {
  echo "Updating Raspbian to latest version..."
  echo "- first clean out any old updates that we don't need anymore"
  sudo apt-get clean
  echo "- second synchronize the database on raspberry pi with available software"
  sudo apt-get update
  echo "- third download and upgrade newer packages"
  sudo apt-get upgrade --assume-yes
  echo "- fourth release space used to upgrade the system"
  sudo apt-get clean

}

do_debug_menu() {

  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Debug Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Ping camera" "" \
    "2 Check Wifi Adapter" ""\
    "3 Set Ethernet to Internet(dhcp)" ""\
    "4 Set ethernet to Camera (10.19.12.1)" ""\
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_ping_camera ;;
      2\ *) do_check_ralink ;;
      3\ *) do_net_interfaces_eth0_internet ;;
      4\ *) do_net_interfaces_eth0_camera ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}


do_maintenance_menu() {

  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Maintenance Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Update PiGuard Menu" "" \
    "2 Update linux & libraries" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_update_piguard_menu ;;
      2\ *) do_update_piguard_linux ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}

do_setup_menu() {
  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Set up all items 2-8 below" "" \
    "2 Set Locale" "" \
    "3 Set Time Zone" "" \
    "4 Set hostname, GPU Mem, enable SSH" "" \
    "5 Update linux & libraries" "" \
    "6 Set Cable to Cam and wifi to upload" "" \
    "7 Change Wifi name and password" "" \
    "8 Install and start ftp-server" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_setup ;;
      2\ *) do_set_locale ;;
      3\ *) do_set_timezone ;;
      4\ *) do_set_hostname_gpu_mem_ssh ;;
      5\ *) do_update_piguard_linux ;;
      6\ *) do_setup_wifi ;;
      7\ *) do_set_ssid_password ;;
      8\ *) do_install_ftp ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  fi

}


#
#interactive use loop
#

while true; do
  SELECTION=$(whiptail --title "PiGuard Menu (piguard-menu)" --menu "Menu Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT --cancel-button Finish --ok-button Select \
    "1 Get Wifi IP Address " "" \
    "2 Debug Menu" ""\
    "3 Maintenance menu" "" \
    "4 Setup Menu" "" \
    "7 Restart (Reboot) PiGuard" "" \
    "8 Shutdown PiGuard safely" "" \
    "9 About PiGuard-Config" "" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$SELECTION" in
      1\ *) do_get_wifi_ip ;;
      2\ *) do_debug_menu ;;
      3\ *) do_maintenance_menu;;
      4\ *) do_setup_menu;;
      7\ *) do_reboot ;;
      8\ *) do_shutdown;;
      9\ *) do_about ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $SELECTION" 20 60 1
  else
    exit 1
  fi
done
